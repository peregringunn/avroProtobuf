/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class nobelPrize extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3293310292589761894L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"nobelPrize\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"prizes\",\"type\":{\"type\":\"record\",\"name\":\"prizesRecord\",\"fields\":[{\"name\":\"year\",\"type\":\"long\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"laureates\",\"type\":{\"type\":\"record\",\"name\":\"laureatesRecord\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"firstname\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"motivation\",\"type\":\"string\"},{\"name\":\"share\",\"type\":\"long\"}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<nobelPrize> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<nobelPrize> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<nobelPrize> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<nobelPrize> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<nobelPrize> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this nobelPrize to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a nobelPrize from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a nobelPrize instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static nobelPrize fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.hitachivantara.avro.prizesRecord prizes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public nobelPrize() {}

  /**
   * All-args constructor.
   * @param prizes The new value for prizes
   */
  public nobelPrize(com.hitachivantara.avro.prizesRecord prizes) {
    this.prizes = prizes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return prizes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: prizes = (com.hitachivantara.avro.prizesRecord)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'prizes' field.
   * @return The value of the 'prizes' field.
   */
  public com.hitachivantara.avro.prizesRecord getPrizes() {
    return prizes;
  }


  /**
   * Sets the value of the 'prizes' field.
   * @param value the value to set.
   */
  public void setPrizes(com.hitachivantara.avro.prizesRecord value) {
    this.prizes = value;
  }

  /**
   * Creates a new nobelPrize RecordBuilder.
   * @return A new nobelPrize RecordBuilder
   */
  public static com.hitachivantara.avro.nobelPrize.Builder newBuilder() {
    return new com.hitachivantara.avro.nobelPrize.Builder();
  }

  /**
   * Creates a new nobelPrize RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new nobelPrize RecordBuilder
   */
  public static com.hitachivantara.avro.nobelPrize.Builder newBuilder(com.hitachivantara.avro.nobelPrize.Builder other) {
    if (other == null) {
      return new com.hitachivantara.avro.nobelPrize.Builder();
    } else {
      return new com.hitachivantara.avro.nobelPrize.Builder(other);
    }
  }

  /**
   * Creates a new nobelPrize RecordBuilder by copying an existing nobelPrize instance.
   * @param other The existing instance to copy.
   * @return A new nobelPrize RecordBuilder
   */
  public static com.hitachivantara.avro.nobelPrize.Builder newBuilder(com.hitachivantara.avro.nobelPrize other) {
    if (other == null) {
      return new com.hitachivantara.avro.nobelPrize.Builder();
    } else {
      return new com.hitachivantara.avro.nobelPrize.Builder(other);
    }
  }

  /**
   * RecordBuilder for nobelPrize instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<nobelPrize>
    implements org.apache.avro.data.RecordBuilder<nobelPrize> {

    private com.hitachivantara.avro.prizesRecord prizes;
    private com.hitachivantara.avro.prizesRecord.Builder prizesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.avro.nobelPrize.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.prizes)) {
        this.prizes = data().deepCopy(fields()[0].schema(), other.prizes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPrizesBuilder()) {
        this.prizesBuilder = com.hitachivantara.avro.prizesRecord.newBuilder(other.getPrizesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing nobelPrize instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.avro.nobelPrize other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.prizes)) {
        this.prizes = data().deepCopy(fields()[0].schema(), other.prizes);
        fieldSetFlags()[0] = true;
      }
      this.prizesBuilder = null;
    }

    /**
      * Gets the value of the 'prizes' field.
      * @return The value.
      */
    public com.hitachivantara.avro.prizesRecord getPrizes() {
      return prizes;
    }


    /**
      * Sets the value of the 'prizes' field.
      * @param value The value of 'prizes'.
      * @return This builder.
      */
    public com.hitachivantara.avro.nobelPrize.Builder setPrizes(com.hitachivantara.avro.prizesRecord value) {
      validate(fields()[0], value);
      this.prizesBuilder = null;
      this.prizes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'prizes' field has been set.
      * @return True if the 'prizes' field has been set, false otherwise.
      */
    public boolean hasPrizes() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'prizes' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.hitachivantara.avro.prizesRecord.Builder getPrizesBuilder() {
      if (prizesBuilder == null) {
        if (hasPrizes()) {
          setPrizesBuilder(com.hitachivantara.avro.prizesRecord.newBuilder(prizes));
        } else {
          setPrizesBuilder(com.hitachivantara.avro.prizesRecord.newBuilder());
        }
      }
      return prizesBuilder;
    }

    /**
     * Sets the Builder instance for the 'prizes' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.hitachivantara.avro.nobelPrize.Builder setPrizesBuilder(com.hitachivantara.avro.prizesRecord.Builder value) {
      clearPrizes();
      prizesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'prizes' field has an active Builder instance
     * @return True if the 'prizes' field has an active Builder instance
     */
    public boolean hasPrizesBuilder() {
      return prizesBuilder != null;
    }

    /**
      * Clears the value of the 'prizes' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.nobelPrize.Builder clearPrizes() {
      prizes = null;
      prizesBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public nobelPrize build() {
      try {
        nobelPrize record = new nobelPrize();
        if (prizesBuilder != null) {
          try {
            record.prizes = this.prizesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("prizes"));
            throw e;
          }
        } else {
          record.prizes = fieldSetFlags()[0] ? this.prizes : (com.hitachivantara.avro.prizesRecord) defaultValue(fields()[0]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<nobelPrize>
    WRITER$ = (org.apache.avro.io.DatumWriter<nobelPrize>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<nobelPrize>
    READER$ = (org.apache.avro.io.DatumReader<nobelPrize>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.prizes.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.prizes == null) {
        this.prizes = new com.hitachivantara.avro.prizesRecord();
      }
      this.prizes.customDecode(in);

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.prizes == null) {
            this.prizes = new com.hitachivantara.avro.prizesRecord();
          }
          this.prizes.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










