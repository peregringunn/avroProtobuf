/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class payloadRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1130755315268028036L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"payloadRecord\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"push_id\",\"type\":\"long\"},{\"name\":\"size\",\"type\":\"long\"},{\"name\":\"distinct_size\",\"type\":\"long\"},{\"name\":\"ref\",\"type\":\"string\"},{\"name\":\"head\",\"type\":\"string\"},{\"name\":\"before\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"distinct\",\"type\":\"boolean\"},{\"name\":\"url\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<payloadRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<payloadRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<payloadRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<payloadRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<payloadRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this payloadRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a payloadRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a payloadRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static payloadRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long push_id;
  private long size;
  private long distinct_size;
  private java.lang.CharSequence ref;
  private java.lang.CharSequence head;
  private java.lang.CharSequence before;
  private java.lang.CharSequence message;
  private boolean distinct;
  private java.lang.CharSequence url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public payloadRecord() {}

  /**
   * All-args constructor.
   * @param push_id The new value for push_id
   * @param size The new value for size
   * @param distinct_size The new value for distinct_size
   * @param ref The new value for ref
   * @param head The new value for head
   * @param before The new value for before
   * @param message The new value for message
   * @param distinct The new value for distinct
   * @param url The new value for url
   */
  public payloadRecord(java.lang.Long push_id, java.lang.Long size, java.lang.Long distinct_size, java.lang.CharSequence ref, java.lang.CharSequence head, java.lang.CharSequence before, java.lang.CharSequence message, java.lang.Boolean distinct, java.lang.CharSequence url) {
    this.push_id = push_id;
    this.size = size;
    this.distinct_size = distinct_size;
    this.ref = ref;
    this.head = head;
    this.before = before;
    this.message = message;
    this.distinct = distinct;
    this.url = url;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return push_id;
    case 1: return size;
    case 2: return distinct_size;
    case 3: return ref;
    case 4: return head;
    case 5: return before;
    case 6: return message;
    case 7: return distinct;
    case 8: return url;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: push_id = (java.lang.Long)value$; break;
    case 1: size = (java.lang.Long)value$; break;
    case 2: distinct_size = (java.lang.Long)value$; break;
    case 3: ref = (java.lang.CharSequence)value$; break;
    case 4: head = (java.lang.CharSequence)value$; break;
    case 5: before = (java.lang.CharSequence)value$; break;
    case 6: message = (java.lang.CharSequence)value$; break;
    case 7: distinct = (java.lang.Boolean)value$; break;
    case 8: url = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'push_id' field.
   * @return The value of the 'push_id' field.
   */
  public long getPushId() {
    return push_id;
  }


  /**
   * Sets the value of the 'push_id' field.
   * @param value the value to set.
   */
  public void setPushId(long value) {
    this.push_id = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public long getSize() {
    return size;
  }


  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(long value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'distinct_size' field.
   * @return The value of the 'distinct_size' field.
   */
  public long getDistinctSize() {
    return distinct_size;
  }


  /**
   * Sets the value of the 'distinct_size' field.
   * @param value the value to set.
   */
  public void setDistinctSize(long value) {
    this.distinct_size = value;
  }

  /**
   * Gets the value of the 'ref' field.
   * @return The value of the 'ref' field.
   */
  public java.lang.CharSequence getRef() {
    return ref;
  }


  /**
   * Sets the value of the 'ref' field.
   * @param value the value to set.
   */
  public void setRef(java.lang.CharSequence value) {
    this.ref = value;
  }

  /**
   * Gets the value of the 'head' field.
   * @return The value of the 'head' field.
   */
  public java.lang.CharSequence getHead() {
    return head;
  }


  /**
   * Sets the value of the 'head' field.
   * @param value the value to set.
   */
  public void setHead(java.lang.CharSequence value) {
    this.head = value;
  }

  /**
   * Gets the value of the 'before' field.
   * @return The value of the 'before' field.
   */
  public java.lang.CharSequence getBefore() {
    return before;
  }


  /**
   * Sets the value of the 'before' field.
   * @param value the value to set.
   */
  public void setBefore(java.lang.CharSequence value) {
    this.before = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'distinct' field.
   * @return The value of the 'distinct' field.
   */
  public boolean getDistinct() {
    return distinct;
  }


  /**
   * Sets the value of the 'distinct' field.
   * @param value the value to set.
   */
  public void setDistinct(boolean value) {
    this.distinct = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Creates a new payloadRecord RecordBuilder.
   * @return A new payloadRecord RecordBuilder
   */
  public static com.hitachivantara.avro.payloadRecord.Builder newBuilder() {
    return new com.hitachivantara.avro.payloadRecord.Builder();
  }

  /**
   * Creates a new payloadRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new payloadRecord RecordBuilder
   */
  public static com.hitachivantara.avro.payloadRecord.Builder newBuilder(com.hitachivantara.avro.payloadRecord.Builder other) {
    if (other == null) {
      return new com.hitachivantara.avro.payloadRecord.Builder();
    } else {
      return new com.hitachivantara.avro.payloadRecord.Builder(other);
    }
  }

  /**
   * Creates a new payloadRecord RecordBuilder by copying an existing payloadRecord instance.
   * @param other The existing instance to copy.
   * @return A new payloadRecord RecordBuilder
   */
  public static com.hitachivantara.avro.payloadRecord.Builder newBuilder(com.hitachivantara.avro.payloadRecord other) {
    if (other == null) {
      return new com.hitachivantara.avro.payloadRecord.Builder();
    } else {
      return new com.hitachivantara.avro.payloadRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for payloadRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<payloadRecord>
    implements org.apache.avro.data.RecordBuilder<payloadRecord> {

    private long push_id;
    private long size;
    private long distinct_size;
    private java.lang.CharSequence ref;
    private java.lang.CharSequence head;
    private java.lang.CharSequence before;
    private java.lang.CharSequence message;
    private boolean distinct;
    private java.lang.CharSequence url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.avro.payloadRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.push_id)) {
        this.push_id = data().deepCopy(fields()[0].schema(), other.push_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.distinct_size)) {
        this.distinct_size = data().deepCopy(fields()[2].schema(), other.distinct_size);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ref)) {
        this.ref = data().deepCopy(fields()[3].schema(), other.ref);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.head)) {
        this.head = data().deepCopy(fields()[4].schema(), other.head);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.before)) {
        this.before = data().deepCopy(fields()[5].schema(), other.before);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.distinct)) {
        this.distinct = data().deepCopy(fields()[7].schema(), other.distinct);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.url)) {
        this.url = data().deepCopy(fields()[8].schema(), other.url);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing payloadRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.avro.payloadRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.push_id)) {
        this.push_id = data().deepCopy(fields()[0].schema(), other.push_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.distinct_size)) {
        this.distinct_size = data().deepCopy(fields()[2].schema(), other.distinct_size);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ref)) {
        this.ref = data().deepCopy(fields()[3].schema(), other.ref);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.head)) {
        this.head = data().deepCopy(fields()[4].schema(), other.head);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.before)) {
        this.before = data().deepCopy(fields()[5].schema(), other.before);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.distinct)) {
        this.distinct = data().deepCopy(fields()[7].schema(), other.distinct);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.url)) {
        this.url = data().deepCopy(fields()[8].schema(), other.url);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'push_id' field.
      * @return The value.
      */
    public long getPushId() {
      return push_id;
    }


    /**
      * Sets the value of the 'push_id' field.
      * @param value The value of 'push_id'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setPushId(long value) {
      validate(fields()[0], value);
      this.push_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'push_id' field has been set.
      * @return True if the 'push_id' field has been set, false otherwise.
      */
    public boolean hasPushId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'push_id' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearPushId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public long getSize() {
      return size;
    }


    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setSize(long value) {
      validate(fields()[1], value);
      this.size = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'distinct_size' field.
      * @return The value.
      */
    public long getDistinctSize() {
      return distinct_size;
    }


    /**
      * Sets the value of the 'distinct_size' field.
      * @param value The value of 'distinct_size'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setDistinctSize(long value) {
      validate(fields()[2], value);
      this.distinct_size = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'distinct_size' field has been set.
      * @return True if the 'distinct_size' field has been set, false otherwise.
      */
    public boolean hasDistinctSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'distinct_size' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearDistinctSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ref' field.
      * @return The value.
      */
    public java.lang.CharSequence getRef() {
      return ref;
    }


    /**
      * Sets the value of the 'ref' field.
      * @param value The value of 'ref'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setRef(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ref = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ref' field has been set.
      * @return True if the 'ref' field has been set, false otherwise.
      */
    public boolean hasRef() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ref' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearRef() {
      ref = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'head' field.
      * @return The value.
      */
    public java.lang.CharSequence getHead() {
      return head;
    }


    /**
      * Sets the value of the 'head' field.
      * @param value The value of 'head'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setHead(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.head = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'head' field has been set.
      * @return True if the 'head' field has been set, false otherwise.
      */
    public boolean hasHead() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'head' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearHead() {
      head = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'before' field.
      * @return The value.
      */
    public java.lang.CharSequence getBefore() {
      return before;
    }


    /**
      * Sets the value of the 'before' field.
      * @param value The value of 'before'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setBefore(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.before = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'before' field has been set.
      * @return True if the 'before' field has been set, false otherwise.
      */
    public boolean hasBefore() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'before' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearBefore() {
      before = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.message = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearMessage() {
      message = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'distinct' field.
      * @return The value.
      */
    public boolean getDistinct() {
      return distinct;
    }


    /**
      * Sets the value of the 'distinct' field.
      * @param value The value of 'distinct'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setDistinct(boolean value) {
      validate(fields()[7], value);
      this.distinct = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'distinct' field has been set.
      * @return True if the 'distinct' field has been set, false otherwise.
      */
    public boolean hasDistinct() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'distinct' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearDistinct() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.url = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.payloadRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public payloadRecord build() {
      try {
        payloadRecord record = new payloadRecord();
        record.push_id = fieldSetFlags()[0] ? this.push_id : (java.lang.Long) defaultValue(fields()[0]);
        record.size = fieldSetFlags()[1] ? this.size : (java.lang.Long) defaultValue(fields()[1]);
        record.distinct_size = fieldSetFlags()[2] ? this.distinct_size : (java.lang.Long) defaultValue(fields()[2]);
        record.ref = fieldSetFlags()[3] ? this.ref : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.head = fieldSetFlags()[4] ? this.head : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.before = fieldSetFlags()[5] ? this.before : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.message = fieldSetFlags()[6] ? this.message : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.distinct = fieldSetFlags()[7] ? this.distinct : (java.lang.Boolean) defaultValue(fields()[7]);
        record.url = fieldSetFlags()[8] ? this.url : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<payloadRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<payloadRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<payloadRecord>
    READER$ = (org.apache.avro.io.DatumReader<payloadRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.push_id);

    out.writeLong(this.size);

    out.writeLong(this.distinct_size);

    out.writeString(this.ref);

    out.writeString(this.head);

    out.writeString(this.before);

    out.writeString(this.message);

    out.writeBoolean(this.distinct);

    out.writeString(this.url);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.push_id = in.readLong();

      this.size = in.readLong();

      this.distinct_size = in.readLong();

      this.ref = in.readString(this.ref instanceof Utf8 ? (Utf8)this.ref : null);

      this.head = in.readString(this.head instanceof Utf8 ? (Utf8)this.head : null);

      this.before = in.readString(this.before instanceof Utf8 ? (Utf8)this.before : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.distinct = in.readBoolean();

      this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.push_id = in.readLong();
          break;

        case 1:
          this.size = in.readLong();
          break;

        case 2:
          this.distinct_size = in.readLong();
          break;

        case 3:
          this.ref = in.readString(this.ref instanceof Utf8 ? (Utf8)this.ref : null);
          break;

        case 4:
          this.head = in.readString(this.head instanceof Utf8 ? (Utf8)this.head : null);
          break;

        case 5:
          this.before = in.readString(this.before instanceof Utf8 ? (Utf8)this.before : null);
          break;

        case 6:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 7:
          this.distinct = in.readBoolean();
          break;

        case 8:
          this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










