/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class actorRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2813786043993759911L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"actorRecord\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"login\",\"type\":\"string\"},{\"name\":\"display_login\",\"type\":\"string\"},{\"name\":\"gravatar_id\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"avatar_url\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<actorRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<actorRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<actorRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<actorRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<actorRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this actorRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a actorRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a actorRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static actorRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence login;
  private java.lang.CharSequence display_login;
  private java.lang.CharSequence gravatar_id;
  private java.lang.CharSequence url;
  private java.lang.CharSequence avatar_url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public actorRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param login The new value for login
   * @param display_login The new value for display_login
   * @param gravatar_id The new value for gravatar_id
   * @param url The new value for url
   * @param avatar_url The new value for avatar_url
   */
  public actorRecord(java.lang.Long id, java.lang.CharSequence login, java.lang.CharSequence display_login, java.lang.CharSequence gravatar_id, java.lang.CharSequence url, java.lang.CharSequence avatar_url) {
    this.id = id;
    this.login = login;
    this.display_login = display_login;
    this.gravatar_id = gravatar_id;
    this.url = url;
    this.avatar_url = avatar_url;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return login;
    case 2: return display_login;
    case 3: return gravatar_id;
    case 4: return url;
    case 5: return avatar_url;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: login = (java.lang.CharSequence)value$; break;
    case 2: display_login = (java.lang.CharSequence)value$; break;
    case 3: gravatar_id = (java.lang.CharSequence)value$; break;
    case 4: url = (java.lang.CharSequence)value$; break;
    case 5: avatar_url = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'login' field.
   * @return The value of the 'login' field.
   */
  public java.lang.CharSequence getLogin() {
    return login;
  }


  /**
   * Sets the value of the 'login' field.
   * @param value the value to set.
   */
  public void setLogin(java.lang.CharSequence value) {
    this.login = value;
  }

  /**
   * Gets the value of the 'display_login' field.
   * @return The value of the 'display_login' field.
   */
  public java.lang.CharSequence getDisplayLogin() {
    return display_login;
  }


  /**
   * Sets the value of the 'display_login' field.
   * @param value the value to set.
   */
  public void setDisplayLogin(java.lang.CharSequence value) {
    this.display_login = value;
  }

  /**
   * Gets the value of the 'gravatar_id' field.
   * @return The value of the 'gravatar_id' field.
   */
  public java.lang.CharSequence getGravatarId() {
    return gravatar_id;
  }


  /**
   * Sets the value of the 'gravatar_id' field.
   * @param value the value to set.
   */
  public void setGravatarId(java.lang.CharSequence value) {
    this.gravatar_id = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'avatar_url' field.
   * @return The value of the 'avatar_url' field.
   */
  public java.lang.CharSequence getAvatarUrl() {
    return avatar_url;
  }


  /**
   * Sets the value of the 'avatar_url' field.
   * @param value the value to set.
   */
  public void setAvatarUrl(java.lang.CharSequence value) {
    this.avatar_url = value;
  }

  /**
   * Creates a new actorRecord RecordBuilder.
   * @return A new actorRecord RecordBuilder
   */
  public static com.hitachivantara.avro.actorRecord.Builder newBuilder() {
    return new com.hitachivantara.avro.actorRecord.Builder();
  }

  /**
   * Creates a new actorRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new actorRecord RecordBuilder
   */
  public static com.hitachivantara.avro.actorRecord.Builder newBuilder(com.hitachivantara.avro.actorRecord.Builder other) {
    if (other == null) {
      return new com.hitachivantara.avro.actorRecord.Builder();
    } else {
      return new com.hitachivantara.avro.actorRecord.Builder(other);
    }
  }

  /**
   * Creates a new actorRecord RecordBuilder by copying an existing actorRecord instance.
   * @param other The existing instance to copy.
   * @return A new actorRecord RecordBuilder
   */
  public static com.hitachivantara.avro.actorRecord.Builder newBuilder(com.hitachivantara.avro.actorRecord other) {
    if (other == null) {
      return new com.hitachivantara.avro.actorRecord.Builder();
    } else {
      return new com.hitachivantara.avro.actorRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for actorRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<actorRecord>
    implements org.apache.avro.data.RecordBuilder<actorRecord> {

    private long id;
    private java.lang.CharSequence login;
    private java.lang.CharSequence display_login;
    private java.lang.CharSequence gravatar_id;
    private java.lang.CharSequence url;
    private java.lang.CharSequence avatar_url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.avro.actorRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.display_login)) {
        this.display_login = data().deepCopy(fields()[2].schema(), other.display_login);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.gravatar_id)) {
        this.gravatar_id = data().deepCopy(fields()[3].schema(), other.gravatar_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.url)) {
        this.url = data().deepCopy(fields()[4].schema(), other.url);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.avatar_url)) {
        this.avatar_url = data().deepCopy(fields()[5].schema(), other.avatar_url);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing actorRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.avro.actorRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.display_login)) {
        this.display_login = data().deepCopy(fields()[2].schema(), other.display_login);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gravatar_id)) {
        this.gravatar_id = data().deepCopy(fields()[3].schema(), other.gravatar_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.url)) {
        this.url = data().deepCopy(fields()[4].schema(), other.url);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.avatar_url)) {
        this.avatar_url = data().deepCopy(fields()[5].schema(), other.avatar_url);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'login' field.
      * @return The value.
      */
    public java.lang.CharSequence getLogin() {
      return login;
    }


    /**
      * Sets the value of the 'login' field.
      * @param value The value of 'login'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setLogin(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.login = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'login' field has been set.
      * @return True if the 'login' field has been set, false otherwise.
      */
    public boolean hasLogin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'login' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearLogin() {
      login = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'display_login' field.
      * @return The value.
      */
    public java.lang.CharSequence getDisplayLogin() {
      return display_login;
    }


    /**
      * Sets the value of the 'display_login' field.
      * @param value The value of 'display_login'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setDisplayLogin(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.display_login = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'display_login' field has been set.
      * @return True if the 'display_login' field has been set, false otherwise.
      */
    public boolean hasDisplayLogin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'display_login' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearDisplayLogin() {
      display_login = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'gravatar_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getGravatarId() {
      return gravatar_id;
    }


    /**
      * Sets the value of the 'gravatar_id' field.
      * @param value The value of 'gravatar_id'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setGravatarId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.gravatar_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'gravatar_id' field has been set.
      * @return True if the 'gravatar_id' field has been set, false otherwise.
      */
    public boolean hasGravatarId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'gravatar_id' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearGravatarId() {
      gravatar_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.url = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'avatar_url' field.
      * @return The value.
      */
    public java.lang.CharSequence getAvatarUrl() {
      return avatar_url;
    }


    /**
      * Sets the value of the 'avatar_url' field.
      * @param value The value of 'avatar_url'.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder setAvatarUrl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.avatar_url = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'avatar_url' field has been set.
      * @return True if the 'avatar_url' field has been set, false otherwise.
      */
    public boolean hasAvatarUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'avatar_url' field.
      * @return This builder.
      */
    public com.hitachivantara.avro.actorRecord.Builder clearAvatarUrl() {
      avatar_url = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public actorRecord build() {
      try {
        actorRecord record = new actorRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.login = fieldSetFlags()[1] ? this.login : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.display_login = fieldSetFlags()[2] ? this.display_login : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.gravatar_id = fieldSetFlags()[3] ? this.gravatar_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.url = fieldSetFlags()[4] ? this.url : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.avatar_url = fieldSetFlags()[5] ? this.avatar_url : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<actorRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<actorRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<actorRecord>
    READER$ = (org.apache.avro.io.DatumReader<actorRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.login);

    out.writeString(this.display_login);

    out.writeString(this.gravatar_id);

    out.writeString(this.url);

    out.writeString(this.avatar_url);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.login = in.readString(this.login instanceof Utf8 ? (Utf8)this.login : null);

      this.display_login = in.readString(this.display_login instanceof Utf8 ? (Utf8)this.display_login : null);

      this.gravatar_id = in.readString(this.gravatar_id instanceof Utf8 ? (Utf8)this.gravatar_id : null);

      this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);

      this.avatar_url = in.readString(this.avatar_url instanceof Utf8 ? (Utf8)this.avatar_url : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.login = in.readString(this.login instanceof Utf8 ? (Utf8)this.login : null);
          break;

        case 2:
          this.display_login = in.readString(this.display_login instanceof Utf8 ? (Utf8)this.display_login : null);
          break;

        case 3:
          this.gravatar_id = in.readString(this.gravatar_id instanceof Utf8 ? (Utf8)this.gravatar_id : null);
          break;

        case 4:
          this.url = in.readString(this.url instanceof Utf8 ? (Utf8)this.url : null);
          break;

        case 5:
          this.avatar_url = in.readString(this.avatar_url instanceof Utf8 ? (Utf8)this.avatar_url : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










