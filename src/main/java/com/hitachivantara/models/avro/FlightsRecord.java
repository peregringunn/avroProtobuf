/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlightsRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3810490773581458517L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlightsRecord\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"Cancelled\",\"type\":\"long\"},{\"name\":\"Delayed\",\"type\":\"long\"},{\"name\":\"Diverted\",\"type\":\"long\"},{\"name\":\"OnTime\",\"type\":\"long\"},{\"name\":\"Total\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlightsRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlightsRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlightsRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlightsRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlightsRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlightsRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlightsRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlightsRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlightsRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long Cancelled;
  private long Delayed;
  private long Diverted;
  private long OnTime;
  private long Total;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlightsRecord() {}

  /**
   * All-args constructor.
   * @param Cancelled The new value for Cancelled
   * @param Delayed The new value for Delayed
   * @param Diverted The new value for Diverted
   * @param OnTime The new value for OnTime
   * @param Total The new value for Total
   */
  public FlightsRecord(java.lang.Long Cancelled, java.lang.Long Delayed, java.lang.Long Diverted, java.lang.Long OnTime, java.lang.Long Total) {
    this.Cancelled = Cancelled;
    this.Delayed = Delayed;
    this.Diverted = Diverted;
    this.OnTime = OnTime;
    this.Total = Total;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Cancelled;
    case 1: return Delayed;
    case 2: return Diverted;
    case 3: return OnTime;
    case 4: return Total;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Cancelled = (java.lang.Long)value$; break;
    case 1: Delayed = (java.lang.Long)value$; break;
    case 2: Diverted = (java.lang.Long)value$; break;
    case 3: OnTime = (java.lang.Long)value$; break;
    case 4: Total = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Cancelled' field.
   * @return The value of the 'Cancelled' field.
   */
  public long getCancelled() {
    return Cancelled;
  }


  /**
   * Sets the value of the 'Cancelled' field.
   * @param value the value to set.
   */
  public void setCancelled(long value) {
    this.Cancelled = value;
  }

  /**
   * Gets the value of the 'Delayed' field.
   * @return The value of the 'Delayed' field.
   */
  public long getDelayed() {
    return Delayed;
  }


  /**
   * Sets the value of the 'Delayed' field.
   * @param value the value to set.
   */
  public void setDelayed(long value) {
    this.Delayed = value;
  }

  /**
   * Gets the value of the 'Diverted' field.
   * @return The value of the 'Diverted' field.
   */
  public long getDiverted() {
    return Diverted;
  }


  /**
   * Sets the value of the 'Diverted' field.
   * @param value the value to set.
   */
  public void setDiverted(long value) {
    this.Diverted = value;
  }

  /**
   * Gets the value of the 'OnTime' field.
   * @return The value of the 'OnTime' field.
   */
  public long getOnTime() {
    return OnTime;
  }


  /**
   * Sets the value of the 'OnTime' field.
   * @param value the value to set.
   */
  public void setOnTime(long value) {
    this.OnTime = value;
  }

  /**
   * Gets the value of the 'Total' field.
   * @return The value of the 'Total' field.
   */
  public long getTotal() {
    return Total;
  }


  /**
   * Sets the value of the 'Total' field.
   * @param value the value to set.
   */
  public void setTotal(long value) {
    this.Total = value;
  }

  /**
   * Creates a new FlightsRecord RecordBuilder.
   * @return A new FlightsRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.FlightsRecord.Builder newBuilder() {
    return new com.hitachivantara.models.avro.FlightsRecord.Builder();
  }

  /**
   * Creates a new FlightsRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlightsRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.FlightsRecord.Builder newBuilder(com.hitachivantara.models.avro.FlightsRecord.Builder other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.FlightsRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.FlightsRecord.Builder(other);
    }
  }

  /**
   * Creates a new FlightsRecord RecordBuilder by copying an existing FlightsRecord instance.
   * @param other The existing instance to copy.
   * @return A new FlightsRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.FlightsRecord.Builder newBuilder(com.hitachivantara.models.avro.FlightsRecord other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.FlightsRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.FlightsRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlightsRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlightsRecord>
    implements org.apache.avro.data.RecordBuilder<FlightsRecord> {

    private long Cancelled;
    private long Delayed;
    private long Diverted;
    private long OnTime;
    private long Total;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.models.avro.FlightsRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Cancelled)) {
        this.Cancelled = data().deepCopy(fields()[0].schema(), other.Cancelled);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Delayed)) {
        this.Delayed = data().deepCopy(fields()[1].schema(), other.Delayed);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Diverted)) {
        this.Diverted = data().deepCopy(fields()[2].schema(), other.Diverted);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.OnTime)) {
        this.OnTime = data().deepCopy(fields()[3].schema(), other.OnTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Total)) {
        this.Total = data().deepCopy(fields()[4].schema(), other.Total);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing FlightsRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.models.avro.FlightsRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Cancelled)) {
        this.Cancelled = data().deepCopy(fields()[0].schema(), other.Cancelled);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Delayed)) {
        this.Delayed = data().deepCopy(fields()[1].schema(), other.Delayed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Diverted)) {
        this.Diverted = data().deepCopy(fields()[2].schema(), other.Diverted);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.OnTime)) {
        this.OnTime = data().deepCopy(fields()[3].schema(), other.OnTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Total)) {
        this.Total = data().deepCopy(fields()[4].schema(), other.Total);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'Cancelled' field.
      * @return The value.
      */
    public long getCancelled() {
      return Cancelled;
    }


    /**
      * Sets the value of the 'Cancelled' field.
      * @param value The value of 'Cancelled'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder setCancelled(long value) {
      validate(fields()[0], value);
      this.Cancelled = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Cancelled' field has been set.
      * @return True if the 'Cancelled' field has been set, false otherwise.
      */
    public boolean hasCancelled() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Cancelled' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder clearCancelled() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Delayed' field.
      * @return The value.
      */
    public long getDelayed() {
      return Delayed;
    }


    /**
      * Sets the value of the 'Delayed' field.
      * @param value The value of 'Delayed'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder setDelayed(long value) {
      validate(fields()[1], value);
      this.Delayed = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Delayed' field has been set.
      * @return True if the 'Delayed' field has been set, false otherwise.
      */
    public boolean hasDelayed() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Delayed' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder clearDelayed() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Diverted' field.
      * @return The value.
      */
    public long getDiverted() {
      return Diverted;
    }


    /**
      * Sets the value of the 'Diverted' field.
      * @param value The value of 'Diverted'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder setDiverted(long value) {
      validate(fields()[2], value);
      this.Diverted = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Diverted' field has been set.
      * @return True if the 'Diverted' field has been set, false otherwise.
      */
    public boolean hasDiverted() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Diverted' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder clearDiverted() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'OnTime' field.
      * @return The value.
      */
    public long getOnTime() {
      return OnTime;
    }


    /**
      * Sets the value of the 'OnTime' field.
      * @param value The value of 'OnTime'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder setOnTime(long value) {
      validate(fields()[3], value);
      this.OnTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'OnTime' field has been set.
      * @return True if the 'OnTime' field has been set, false otherwise.
      */
    public boolean hasOnTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'OnTime' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder clearOnTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Total' field.
      * @return The value.
      */
    public long getTotal() {
      return Total;
    }


    /**
      * Sets the value of the 'Total' field.
      * @param value The value of 'Total'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder setTotal(long value) {
      validate(fields()[4], value);
      this.Total = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Total' field has been set.
      * @return True if the 'Total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Total' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.FlightsRecord.Builder clearTotal() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlightsRecord build() {
      try {
        FlightsRecord record = new FlightsRecord();
        record.Cancelled = fieldSetFlags()[0] ? this.Cancelled : (java.lang.Long) defaultValue(fields()[0]);
        record.Delayed = fieldSetFlags()[1] ? this.Delayed : (java.lang.Long) defaultValue(fields()[1]);
        record.Diverted = fieldSetFlags()[2] ? this.Diverted : (java.lang.Long) defaultValue(fields()[2]);
        record.OnTime = fieldSetFlags()[3] ? this.OnTime : (java.lang.Long) defaultValue(fields()[3]);
        record.Total = fieldSetFlags()[4] ? this.Total : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlightsRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlightsRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlightsRecord>
    READER$ = (org.apache.avro.io.DatumReader<FlightsRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.Cancelled);

    out.writeLong(this.Delayed);

    out.writeLong(this.Diverted);

    out.writeLong(this.OnTime);

    out.writeLong(this.Total);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Cancelled = in.readLong();

      this.Delayed = in.readLong();

      this.Diverted = in.readLong();

      this.OnTime = in.readLong();

      this.Total = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Cancelled = in.readLong();
          break;

        case 1:
          this.Delayed = in.readLong();
          break;

        case 2:
          this.Diverted = in.readLong();
          break;

        case 3:
          this.OnTime = in.readLong();
          break;

        case 4:
          this.Total = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










