/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TimeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6406717992394541735L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeRecord\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"Label\",\"type\":\"string\"},{\"name\":\"Month\",\"type\":\"long\"},{\"name\":\"MonthName\",\"type\":\"string\"},{\"name\":\"Year\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TimeRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TimeRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TimeRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TimeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TimeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TimeRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TimeRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TimeRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TimeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence Label;
  private long Month;
  private java.lang.CharSequence MonthName;
  private long Year;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeRecord() {}

  /**
   * All-args constructor.
   * @param Label The new value for Label
   * @param Month The new value for Month
   * @param MonthName The new value for MonthName
   * @param Year The new value for Year
   */
  public TimeRecord(java.lang.CharSequence Label, java.lang.Long Month, java.lang.CharSequence MonthName, java.lang.Long Year) {
    this.Label = Label;
    this.Month = Month;
    this.MonthName = MonthName;
    this.Year = Year;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Label;
    case 1: return Month;
    case 2: return MonthName;
    case 3: return Year;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Label = (java.lang.CharSequence)value$; break;
    case 1: Month = (java.lang.Long)value$; break;
    case 2: MonthName = (java.lang.CharSequence)value$; break;
    case 3: Year = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Label' field.
   * @return The value of the 'Label' field.
   */
  public java.lang.CharSequence getLabel() {
    return Label;
  }


  /**
   * Sets the value of the 'Label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.Label = value;
  }

  /**
   * Gets the value of the 'Month' field.
   * @return The value of the 'Month' field.
   */
  public long getMonth() {
    return Month;
  }


  /**
   * Sets the value of the 'Month' field.
   * @param value the value to set.
   */
  public void setMonth(long value) {
    this.Month = value;
  }

  /**
   * Gets the value of the 'MonthName' field.
   * @return The value of the 'MonthName' field.
   */
  public java.lang.CharSequence getMonthName() {
    return MonthName;
  }


  /**
   * Sets the value of the 'MonthName' field.
   * @param value the value to set.
   */
  public void setMonthName(java.lang.CharSequence value) {
    this.MonthName = value;
  }

  /**
   * Gets the value of the 'Year' field.
   * @return The value of the 'Year' field.
   */
  public long getYear() {
    return Year;
  }


  /**
   * Sets the value of the 'Year' field.
   * @param value the value to set.
   */
  public void setYear(long value) {
    this.Year = value;
  }

  /**
   * Creates a new TimeRecord RecordBuilder.
   * @return A new TimeRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.TimeRecord.Builder newBuilder() {
    return new com.hitachivantara.models.avro.TimeRecord.Builder();
  }

  /**
   * Creates a new TimeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.TimeRecord.Builder newBuilder(com.hitachivantara.models.avro.TimeRecord.Builder other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.TimeRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.TimeRecord.Builder(other);
    }
  }

  /**
   * Creates a new TimeRecord RecordBuilder by copying an existing TimeRecord instance.
   * @param other The existing instance to copy.
   * @return A new TimeRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.TimeRecord.Builder newBuilder(com.hitachivantara.models.avro.TimeRecord other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.TimeRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.TimeRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for TimeRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeRecord>
    implements org.apache.avro.data.RecordBuilder<TimeRecord> {

    private java.lang.CharSequence Label;
    private long Month;
    private java.lang.CharSequence MonthName;
    private long Year;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.models.avro.TimeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Label)) {
        this.Label = data().deepCopy(fields()[0].schema(), other.Label);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Month)) {
        this.Month = data().deepCopy(fields()[1].schema(), other.Month);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.MonthName)) {
        this.MonthName = data().deepCopy(fields()[2].schema(), other.MonthName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Year)) {
        this.Year = data().deepCopy(fields()[3].schema(), other.Year);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TimeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.models.avro.TimeRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Label)) {
        this.Label = data().deepCopy(fields()[0].schema(), other.Label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Month)) {
        this.Month = data().deepCopy(fields()[1].schema(), other.Month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MonthName)) {
        this.MonthName = data().deepCopy(fields()[2].schema(), other.MonthName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Year)) {
        this.Year = data().deepCopy(fields()[3].schema(), other.Year);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return Label;
    }


    /**
      * Sets the value of the 'Label' field.
      * @param value The value of 'Label'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Label' field has been set.
      * @return True if the 'Label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Label' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder clearLabel() {
      Label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Month' field.
      * @return The value.
      */
    public long getMonth() {
      return Month;
    }


    /**
      * Sets the value of the 'Month' field.
      * @param value The value of 'Month'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder setMonth(long value) {
      validate(fields()[1], value);
      this.Month = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Month' field has been set.
      * @return True if the 'Month' field has been set, false otherwise.
      */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Month' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder clearMonth() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MonthName' field.
      * @return The value.
      */
    public java.lang.CharSequence getMonthName() {
      return MonthName;
    }


    /**
      * Sets the value of the 'MonthName' field.
      * @param value The value of 'MonthName'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder setMonthName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.MonthName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MonthName' field has been set.
      * @return True if the 'MonthName' field has been set, false otherwise.
      */
    public boolean hasMonthName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MonthName' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder clearMonthName() {
      MonthName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Year' field.
      * @return The value.
      */
    public long getYear() {
      return Year;
    }


    /**
      * Sets the value of the 'Year' field.
      * @param value The value of 'Year'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder setYear(long value) {
      validate(fields()[3], value);
      this.Year = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Year' field has been set.
      * @return True if the 'Year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Year' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.TimeRecord.Builder clearYear() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TimeRecord build() {
      try {
        TimeRecord record = new TimeRecord();
        record.Label = fieldSetFlags()[0] ? this.Label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Month = fieldSetFlags()[1] ? this.Month : (java.lang.Long) defaultValue(fields()[1]);
        record.MonthName = fieldSetFlags()[2] ? this.MonthName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Year = fieldSetFlags()[3] ? this.Year : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TimeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TimeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TimeRecord>
    READER$ = (org.apache.avro.io.DatumReader<TimeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.Label);

    out.writeLong(this.Month);

    out.writeString(this.MonthName);

    out.writeLong(this.Year);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Label = in.readString(this.Label instanceof Utf8 ? (Utf8)this.Label : null);

      this.Month = in.readLong();

      this.MonthName = in.readString(this.MonthName instanceof Utf8 ? (Utf8)this.MonthName : null);

      this.Year = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Label = in.readString(this.Label instanceof Utf8 ? (Utf8)this.Label : null);
          break;

        case 1:
          this.Month = in.readLong();
          break;

        case 2:
          this.MonthName = in.readString(this.MonthName instanceof Utf8 ? (Utf8)this.MonthName : null);
          break;

        case 3:
          this.Year = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










