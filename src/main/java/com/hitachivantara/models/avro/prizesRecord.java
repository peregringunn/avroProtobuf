/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class prizesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4183257877263748127L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"prizesRecord\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"year\",\"type\":\"long\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"laureates\",\"type\":{\"type\":\"record\",\"name\":\"laureatesRecord\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"firstname\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"motivation\",\"type\":\"string\"},{\"name\":\"share\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<prizesRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<prizesRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<prizesRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<prizesRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<prizesRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this prizesRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a prizesRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a prizesRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static prizesRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long year;
  private java.lang.CharSequence category;
  private com.hitachivantara.models.avro.laureatesRecord laureates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public prizesRecord() {}

  /**
   * All-args constructor.
   * @param year The new value for year
   * @param category The new value for category
   * @param laureates The new value for laureates
   */
  public prizesRecord(java.lang.Long year, java.lang.CharSequence category, com.hitachivantara.models.avro.laureatesRecord laureates) {
    this.year = year;
    this.category = category;
    this.laureates = laureates;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return category;
    case 2: return laureates;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Long)value$; break;
    case 1: category = (java.lang.CharSequence)value$; break;
    case 2: laureates = (com.hitachivantara.models.avro.laureatesRecord)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public long getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(long value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'laureates' field.
   * @return The value of the 'laureates' field.
   */
  public com.hitachivantara.models.avro.laureatesRecord getLaureates() {
    return laureates;
  }


  /**
   * Sets the value of the 'laureates' field.
   * @param value the value to set.
   */
  public void setLaureates(com.hitachivantara.models.avro.laureatesRecord value) {
    this.laureates = value;
  }

  /**
   * Creates a new prizesRecord RecordBuilder.
   * @return A new prizesRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.prizesRecord.Builder newBuilder() {
    return new com.hitachivantara.models.avro.prizesRecord.Builder();
  }

  /**
   * Creates a new prizesRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new prizesRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.prizesRecord.Builder newBuilder(com.hitachivantara.models.avro.prizesRecord.Builder other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.prizesRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.prizesRecord.Builder(other);
    }
  }

  /**
   * Creates a new prizesRecord RecordBuilder by copying an existing prizesRecord instance.
   * @param other The existing instance to copy.
   * @return A new prizesRecord RecordBuilder
   */
  public static com.hitachivantara.models.avro.prizesRecord.Builder newBuilder(com.hitachivantara.models.avro.prizesRecord other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.prizesRecord.Builder();
    } else {
      return new com.hitachivantara.models.avro.prizesRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for prizesRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<prizesRecord>
    implements org.apache.avro.data.RecordBuilder<prizesRecord> {

    private long year;
    private java.lang.CharSequence category;
    private com.hitachivantara.models.avro.laureatesRecord laureates;
    private com.hitachivantara.models.avro.laureatesRecord.Builder laureatesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.models.avro.prizesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.laureates)) {
        this.laureates = data().deepCopy(fields()[2].schema(), other.laureates);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasLaureatesBuilder()) {
        this.laureatesBuilder = com.hitachivantara.models.avro.laureatesRecord.newBuilder(other.getLaureatesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing prizesRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.models.avro.prizesRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.laureates)) {
        this.laureates = data().deepCopy(fields()[2].schema(), other.laureates);
        fieldSetFlags()[2] = true;
      }
      this.laureatesBuilder = null;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public long getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder setYear(long value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.category = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder clearCategory() {
      category = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'laureates' field.
      * @return The value.
      */
    public com.hitachivantara.models.avro.laureatesRecord getLaureates() {
      return laureates;
    }


    /**
      * Sets the value of the 'laureates' field.
      * @param value The value of 'laureates'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder setLaureates(com.hitachivantara.models.avro.laureatesRecord value) {
      validate(fields()[2], value);
      this.laureatesBuilder = null;
      this.laureates = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'laureates' field has been set.
      * @return True if the 'laureates' field has been set, false otherwise.
      */
    public boolean hasLaureates() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'laureates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.hitachivantara.models.avro.laureatesRecord.Builder getLaureatesBuilder() {
      if (laureatesBuilder == null) {
        if (hasLaureates()) {
          setLaureatesBuilder(com.hitachivantara.models.avro.laureatesRecord.newBuilder(laureates));
        } else {
          setLaureatesBuilder(com.hitachivantara.models.avro.laureatesRecord.newBuilder());
        }
      }
      return laureatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'laureates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.hitachivantara.models.avro.prizesRecord.Builder setLaureatesBuilder(com.hitachivantara.models.avro.laureatesRecord.Builder value) {
      clearLaureates();
      laureatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'laureates' field has an active Builder instance
     * @return True if the 'laureates' field has an active Builder instance
     */
    public boolean hasLaureatesBuilder() {
      return laureatesBuilder != null;
    }

    /**
      * Clears the value of the 'laureates' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.prizesRecord.Builder clearLaureates() {
      laureates = null;
      laureatesBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public prizesRecord build() {
      try {
        prizesRecord record = new prizesRecord();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Long) defaultValue(fields()[0]);
        record.category = fieldSetFlags()[1] ? this.category : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (laureatesBuilder != null) {
          try {
            record.laureates = this.laureatesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("laureates"));
            throw e;
          }
        } else {
          record.laureates = fieldSetFlags()[2] ? this.laureates : (com.hitachivantara.models.avro.laureatesRecord) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<prizesRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<prizesRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<prizesRecord>
    READER$ = (org.apache.avro.io.DatumReader<prizesRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.year);

    out.writeString(this.category);

    this.laureates.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.year = in.readLong();

      this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);

      if (this.laureates == null) {
        this.laureates = new com.hitachivantara.models.avro.laureatesRecord();
      }
      this.laureates.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.year = in.readLong();
          break;

        case 1:
          this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          break;

        case 2:
          if (this.laureates == null) {
            this.laureates = new com.hitachivantara.models.avro.laureatesRecord();
          }
          this.laureates.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










