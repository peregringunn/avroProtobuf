/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hitachivantara.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Movies extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4854316972470594455L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movies\",\"namespace\":\"com.hitachivantara.avro\",\"fields\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"long\"},{\"name\":\"cast\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"genres\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Movies> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Movies> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Movies> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Movies> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Movies> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Movies to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Movies from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Movies instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Movies fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence title;
  private long year;
  private java.util.List<java.lang.CharSequence> cast;
  private java.util.List<java.lang.CharSequence> genres;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Movies() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param year The new value for year
   * @param cast The new value for cast
   * @param genres The new value for genres
   */
  public Movies(java.lang.CharSequence title, java.lang.Long year, java.util.List<java.lang.CharSequence> cast, java.util.List<java.lang.CharSequence> genres) {
    this.title = title;
    this.year = year;
    this.cast = cast;
    this.genres = genres;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return year;
    case 2: return cast;
    case 3: return genres;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: title = (java.lang.CharSequence)value$; break;
    case 1: year = (java.lang.Long)value$; break;
    case 2: cast = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: genres = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public long getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(long value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'cast' field.
   * @return The value of the 'cast' field.
   */
  public java.util.List<java.lang.CharSequence> getCast() {
    return cast;
  }


  /**
   * Sets the value of the 'cast' field.
   * @param value the value to set.
   */
  public void setCast(java.util.List<java.lang.CharSequence> value) {
    this.cast = value;
  }

  /**
   * Gets the value of the 'genres' field.
   * @return The value of the 'genres' field.
   */
  public java.util.List<java.lang.CharSequence> getGenres() {
    return genres;
  }


  /**
   * Sets the value of the 'genres' field.
   * @param value the value to set.
   */
  public void setGenres(java.util.List<java.lang.CharSequence> value) {
    this.genres = value;
  }

  /**
   * Creates a new Movies RecordBuilder.
   * @return A new Movies RecordBuilder
   */
  public static com.hitachivantara.models.avro.Movies.Builder newBuilder() {
    return new com.hitachivantara.models.avro.Movies.Builder();
  }

  /**
   * Creates a new Movies RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Movies RecordBuilder
   */
  public static com.hitachivantara.models.avro.Movies.Builder newBuilder(com.hitachivantara.models.avro.Movies.Builder other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.Movies.Builder();
    } else {
      return new com.hitachivantara.models.avro.Movies.Builder(other);
    }
  }

  /**
   * Creates a new Movies RecordBuilder by copying an existing Movies instance.
   * @param other The existing instance to copy.
   * @return A new Movies RecordBuilder
   */
  public static com.hitachivantara.models.avro.Movies.Builder newBuilder(com.hitachivantara.models.avro.Movies other) {
    if (other == null) {
      return new com.hitachivantara.models.avro.Movies.Builder();
    } else {
      return new com.hitachivantara.models.avro.Movies.Builder(other);
    }
  }

  /**
   * RecordBuilder for Movies instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movies>
    implements org.apache.avro.data.RecordBuilder<Movies> {

    private java.lang.CharSequence title;
    private long year;
    private java.util.List<java.lang.CharSequence> cast;
    private java.util.List<java.lang.CharSequence> genres;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hitachivantara.models.avro.Movies.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cast)) {
        this.cast = data().deepCopy(fields()[2].schema(), other.cast);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.genres)) {
        this.genres = data().deepCopy(fields()[3].schema(), other.genres);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Movies instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hitachivantara.models.avro.Movies other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cast)) {
        this.cast = data().deepCopy(fields()[2].schema(), other.cast);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.genres)) {
        this.genres = data().deepCopy(fields()[3].schema(), other.genres);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public long getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder setYear(long value) {
      validate(fields()[1], value);
      this.year = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder clearYear() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cast' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCast() {
      return cast;
    }


    /**
      * Sets the value of the 'cast' field.
      * @param value The value of 'cast'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder setCast(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.cast = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cast' field has been set.
      * @return True if the 'cast' field has been set, false otherwise.
      */
    public boolean hasCast() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cast' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder clearCast() {
      cast = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'genres' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGenres() {
      return genres;
    }


    /**
      * Sets the value of the 'genres' field.
      * @param value The value of 'genres'.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder setGenres(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.genres = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'genres' field has been set.
      * @return True if the 'genres' field has been set, false otherwise.
      */
    public boolean hasGenres() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'genres' field.
      * @return This builder.
      */
    public com.hitachivantara.models.avro.Movies.Builder clearGenres() {
      genres = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Movies build() {
      try {
        Movies record = new Movies();
        record.title = fieldSetFlags()[0] ? this.title : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.year = fieldSetFlags()[1] ? this.year : (java.lang.Long) defaultValue(fields()[1]);
        record.cast = fieldSetFlags()[2] ? this.cast : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.genres = fieldSetFlags()[3] ? this.genres : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Movies>
    WRITER$ = (org.apache.avro.io.DatumWriter<Movies>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Movies>
    READER$ = (org.apache.avro.io.DatumReader<Movies>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.title);

    out.writeLong(this.year);

    long size0 = this.cast.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.cast) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.genres.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.genres) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.year = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.cast;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("cast").schema());
        this.cast = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.genres;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("genres").schema());
        this.genres = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 1:
          this.year = in.readLong();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.cast;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("cast").schema());
            this.cast = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 3:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.genres;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("genres").schema());
            this.genres = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










